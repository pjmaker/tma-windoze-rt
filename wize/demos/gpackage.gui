#!/usr/bin/env wize

{script} {

    # Mockup of synaptic using rpm or dpkg.
    # This exercises some of GUI's functionality.
    
    variable Opts {
        { -mgr     {}     "Type of manager" -type {choice rpm dpkg} }
    }

    *array _ {
        plst {} tdat {} after:psel {}
        rpm:hdr {S Package Version Description Release Size Date Group}
        dpkg:hdr {S Package Version Description Status Desired Error }
        lst:main {All Local/main Local/nonfree Local/universe}
        
        rpm:inf { i "rpm -qi" p "rpm -q --provides" f "rpm -q -l" r "rpm -qR" }
        dpkg:inf { i "dpkg -s" p "" f "dpkg -L" r "" }
        
        rpm:ecmdtest "rpm -e --test"
        dpkg:ecmdtest ""
        
        rpm:ecmd "rpm -e"
        dpkg:ecmd "dpkg -r"

    }
    
    # Table lookup of dpkg status-code chars.
    *tree new Ds 0 {
        error   {
            h Hold        x X          r Reinst-required
        }
        desired {
            i Install     r Remove     p Purge       h Hold   u Unknown
        }
        status  {
            i Installed   n Not-Inst   c Cfg-files   u Unpacked
            f Failed-cfg  h Half-inst  w Trig-await  t Trig-pend
        }
    }
        
    proc FmtDate {_ d} {
        return [clock format $d]
    }
    
    proc Uninstall {_} {
        upvar $_ {}
        set t $(w,ptree)
        set ids [TreeView find $t -name 1 -column S]
        set lst [TreeView find $t -name 1 -column S -return Package]
        if {![llength $lst]} return
        if {[set ok [tk_messageBox -message "Ok to uninstall: $lst?" -type okcancel]] != "ok"} {
            return
        }
        set ucmd $($(-mgr):ecmd)
        foreach i $ids n $lst {
            if {[catch { eval exec $ucmd [list $n] } rc]} {
                tk_messageBox -message "uninstall of '$n' failed: $rc"
                continue
            }
            TreeView delete $t $i
        }
    }
    
    proc Test-Uninstall {_} {
        upvar $_ {}
        set t $(w,ptree)
        set ids [TreeView find $t -name 1 -column S]
        set lst [TreeView find $t -name 1 -column S -return Package]
        if {![llength $lst]} return
        set ucmd $($(-mgr):ecmdtest)
        if {$ucmd == {}} {
            tk_messageBox -message "test unsupported"
            return
        }
        foreach i $ids n $lst {
            if {[catch { eval exec $ucmd [list $n] } rc]} {
                tk_messageBox -message "Test for '$n': $rc"
            }
        }
    }
    
    proc ListSel {_} {
        # Handle catagory selection.
        upvar $_ {}
        set t $(w,ptree)
        set g $(w,glst)
        set x $(w,itxt)
        set tt [TreeView cget $t -tree]
        set gg [TreeView cget $g -tree]
        set id [TreeView index $g focus]
        if {$id == {}} return
        set path [TreeView get $g -full $id]
        Text delete $x 1.0 end
        if {$path == "All"} {
            TreeView show $t all
            return
        }
        if {![$gg is leaf $id]} {
            TreeView hide $t all
            foreach i [tree op tag names $tt] {
                if {![string match grp:$path/* $i]} continue
                TreeView show $t $i
            }
            return
        }
        TreeView hide $t all
        TreeView show $t grp:$path
    }
    
    
    proc PkgSel {_ {do 0}} {
        # Handle package selection.
        upvar $_ {}
        if {$do == 0} {
            catch {after cancel $(after:psel) }
            set (after:psel) [after 500 [list $_ PkgSel 1]]
            return
        }
        set t $(w,ptree)
        set tt [TreeView cget $t -tree]
        set id [TreeView index $t focus]
        if {$id == {}} return
        set pkg [TreeView entry set $t $id Package]
        if {$pkg == {}} return
        
        foreach {w cmd} $($(-mgr):inf) {
            if {$cmd == {}} continue
            set x $(w,${w}txt)
            set info [eval exec $cmd [list $pkg]]
            Text delete $x 1.0 end
            Text insert $x end $info
        }
    }
    
    proc ListFill {_} {
        # Fill the catagory list window.
        upvar $_ {}
        set g $(w,glst)
        set t $(w,ptree)
        set tt [TreeView cget $t -tree]
        set grps [$tt find -notop -return Group]
        foreach i $grps {
            incr q($i)
        }
        set num [TreeView find $t -count]
        TreeView insert $g end All -sublabel " ($num)"
        foreach i [array names q] {
            catch { $g insert end $i -sublabel " ($q($i))" }
        }
        TreeView column conf $g #0 -sortmode dictionary
        foreach i [TreeView find $g -istree] {
            blt::tv::SortTree $g #0 $i
        }
        TreeView open $g all
        TreeView entry select $g top
        focus $g
    }
    
    proc Search {_} {
        # Limit view with search string.
        upvar $_ {}
        set t $(w,ptree)
        set s $(w,srch)
        ListSel $_
        set str [Entry get $s]
        set ids [TreeView find $t -nocase -glob -name *$str* -column Description]
        foreach i [TreeView find $t -visible] {
            if {[lsearch $ids $i]<0} {
                $t hide $i
            }
        }
    }

    proc Load_rpm {_} {
        upvar $_ {}
        set g $(w,glst)
        set t $(w,ptree)
        if {[set td $(tdat)] == {}} {
            set td [tree create]
            TreeView conf $g -autocreate 1 -separator /
        } else {
            TreeView delete $t all
        }

        set (plst) [exec rpm -qa --qf "%{NAME} %{VERSION} \"%{SUMMARY}\" %{RELEASE} %{SIZE} %{INSTALLTIME} \"%{GROUP}\" "]
        set lst {}
        #TreeView conf $t -autocreate 1 -separator /
        foreach {n v d rel sz inst grp} $(plst) {
            set data [list Version $v Package $n Description $d S 0 Date $inst Release $rel Size $sz Group $grp]
            $td insert 0 -data $data -tags [list grp:$grp]
        }
        blt::tv::SortColumn $t Package
        if {$(tdat) == {}} {
            TreeView conf $t -tree $td
            set (tdat) $td
            ListFill $_
        }
    }
    
    proc Load_dpkg {_} {
        # Load the dpkg info.
        variable Ds
        upvar $_ {}
        set g $(w,glst)
        set t $(w,ptree)
        if {[set td $(tdat)] == {}} {
            set td [tree create]
        } else {
            TreeView delete $t all
        }

        set (plst) [split [string trim [exec dpkg -l]] \n]
        set hdr [lrange $(plst) 0 4]
        set dat [lrange $(plst) 5 end]
        set ss %3s
        set hsz [string range [lindex $hdr end] 4 end]
        set dds 3
        set m1 -1
        foreach i [split $hsz -] {
            incr dds [incr m1]
            set m1 [string length $i]
            lappend ss %${m1}s
        }
        set sfmt [join [lrange $ss 0 end-1]]
        foreach i $dat {
            scan $i $sfmt ds dn dv
            set dd [string range $i $dds end]
            while {[string length $ds]<3} { append ds " " }
            foreach j [split $ds {}] K {desired status error} {
                if {[string is upper $j]} {
                    set ns [$Ds get $K [string tolower $j] {}]
                    append ns *
                } else {
                    set ns [$Ds get $K $j {}]
                }
                set S($K) $ns
            }
                
            set data [list S 0 Version $dv Package $dn Description $dd Status $S(status) Desired $S(desired) Error $S(error)]
            $td insert 0 -data $data
        }
        blt::tv::SortColumn $t Package
        if {$(tdat) == {}} {
            TreeView conf $t -tree $td
            set (tdat) $td
        }
    }
    
    proc Main {_ args} {
        # Main entry point.
        upvar $_ {}
        set g $(w,glst)
        set t $(w,ptree)
        styles item $t column #0
        TreeView column conf $t #0 -hide 1
        if {$(-mgr) == {}} {
            if {![catch {exec dpkg --version}]} {
                set (-mgr) dpkg
            } elseif {![catch {exec rpm --version}]} {
                set (-mgr) rpm
            } else {
                error "can not find managers rpm or dpkg"
            }
        }
        foreach n $($(-mgr):hdr) {
            TreeView column insert $t end $n
            styles item $t column $n
        }
        if {$(-mgr) == "dpkg"} {
            set wp [Panedwindow panes $(w,tpane)]
            Panedwindow forget $(w,tpane) [lindex $wp 0]
        }
        Load_$(-mgr) $_
        bind $g <<TreeViewFocusEvent>> [list $_ ListSel]
        bind $t <<TreeViewFocusEvent>> [list $_ PkgSel]
        wm title $(w,.) "Gpackage managing '$(-mgr)'"
    }
}

{style} {
    Toplevel {
        @eval {
            font conf TkDefaultFont -size -14
            font conf TkFixedFont -size -14
            font conf TkDefaultFont -family Verdana
        }
        @defimages {
            blue {blueplasma -gamma 2}
            grb  greenball
            brb  blueball
        }
        @deffonts { mfnt Verdana,Helvetica }
    }
    Panedwindow {
        -showhandle 0
    }
    TreeView {
        -font ^mfnt
        -bg White -selectbackground SteelBlue -selectforeground White
        -nofocusselectbackground SteelBlue -nofocusselectforeground White
    }
    TreeView::column {
        -bd 1 -relief raised -justify left -titlejustify left
        -command {blt::tv::SortColumn %W %C}
    }
    TreeView::column::S {
        @eval {
            TreeView style create checkbox %W cb -showvalue 0 -linewidth 1 -filltile [images lookup %W blue]
            TreeView style create checkbox %W cb2 -showvalue 0 -linewidth 1 -filltile [images lookup %W blue] -icon [images lookup %W brb]
        }
        -style cb -edit 1 -titlejustify center
    }
    TreeView::column::Date {
        -justify right
        @eval {
            TreeView style create textbox %W date -formatcmd [list %_ FmtDate %%V]
        }
        -style date
    }
    TreeView::column::Size {
        -justify right
        @eval {
            TreeView style create textbox %W size -formatcmd [list blt::tv::commify %%V]
        }
        -style size
    }
    Text {
        @@ { -tip "Description of package" }
    }
    Button/bframe { -takefocus 1 }
    .srch {
        @bind { <Return> Search }
    }
    Tabset {
        -slant right
    }
    .ptree {
        -flat 1 -hideicons 1 -underline 1
        @eval {
            TreeView style create textbox %W alt -bg LightBlue
        }
        -altstyle alt
    }
    .glst {
        @eval {
            TreeView style create textbox %W sub -fg Blue
        }
        -substyle sub
        -icons ^grb
    }
    .bsect {
        -relief sunken
    }
    Text {
        -wrap none
    }

}

{Toplevel + -geom 800x600} {
    {statusbar} {}
    {Frame + -id bbar -subpos l -pos _} {
        Button Uninstall
        Button Test-Uninstall
        Label Filter:
        {Entry - -id srch -msg Search} {}
    }
    {Panedwindow + -id tpane -pos *} {
        {pane +} {
            {Frame + -pos *} {
                {TreeView - -id glst -maketree 1 -scroll * -pos *} {}
                {#Frame + -id bframe -subns &Sel -pos _n} {
                    {Button - -id bsect -pos _} {Sections}
                    {Button - -id bstat -pos _} {Status}
                    {Button - -id borig -pos _} {Origin}
                    {Button - -id bfilt -pos _} {Custom-Filters}
                    {Button - -id bsrch -pos _} {Search-Results}
                }
            }
        }
        {pane +} {
            {Panedwindow + -vertical 1 -pos *} {
                {pane +} {
                    {TreeView - -id ptree -scroll * -pos *} {}
                }
                {pane +} {
                    {Tabset + -pos *} {
                        {tab + -label Info} {
                            {Text - -id itxt -scroll * -pos *} {}
                        }
                        {tab + -label Files} {
                            {Text - -id ftxt -scroll * -pos *} {}
                        }
                        {tab + -label Requires} {
                            {Text - -id rtxt -scroll * -pos *} {}
                        }
                        {tab + -label Provides} {
                            {Text - -id ptxt -scroll * -pos *} {}
                        }
                    }
                }
            }
        }
    }
}

